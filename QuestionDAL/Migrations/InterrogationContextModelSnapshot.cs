// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RandomQuestionInterview.QuestionDAL.Context;

namespace RandomQuestionInterview.QuestionDAL.Migrations
{
    [DbContext(typeof(InterrogationContext))]
    partial class InterrogationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RandomQuestionInterview.QuestionDAL.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions","QDB");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            QuestionText = "От какого класса наследуются все обекты C#?"
                        },
                        new
                        {
                            QuestionId = 2,
                            QuestionText = "Расскажите в чем разница между value и reference типами."
                        },
                        new
                        {
                            QuestionId = 3,
                            QuestionText = "Что такое делегаты и события"
                        },
                        new
                        {
                            QuestionId = 4,
                            QuestionText = "Опишите разницу между абстрактными классами и интерфейсами"
                        },
                        new
                        {
                            QuestionId = 5,
                            QuestionText = "В чем разница между Dispose и Finalize?"
                        },
                        new
                        {
                            QuestionId = 6,
                            QuestionText = "Опишите работу Garbage Collector в C#."
                        },
                        new
                        {
                            QuestionId = 7,
                            QuestionText = "Что такое версионность WebAPI."
                        },
                        new
                        {
                            QuestionId = 8,
                            QuestionText = "Перечислите елементы SOLID"
                        },
                        new
                        {
                            QuestionId = 9,
                            QuestionText = "Опишите что означает Restful API"
                        },
                        new
                        {
                            QuestionId = 10,
                            QuestionText = "Что такое Dependency Injection?"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
